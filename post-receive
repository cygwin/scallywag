#!/usr/bin/env python3
#
# post-receive hook to start a package build via appveyor REST API
#

import json
import os
import sqlite3
import subprocess
import sys
import urllib.error
import urllib.request

import carpetbag

account = subprocess.check_output(['git', 'config', 'appveyor.account']).strip().decode('ascii')
token = subprocess.check_output(['git', 'config', 'appveyor.token']).strip().decode('ascii')
slug = 'scallywag'


def post_receive(commit, reference):
    repo = os.environ['GL_REPO']  # set by gitolite
    maintainer = os.environ['CYGNAME']  # set for ssh-wrapper

    default_tokens = ''
    try:
        with open(os.path.join('/sourceware/cygwin-staging/home', maintainer, '!scallywag')) as f:
            default_tokens = ''.join([l.strip() for l in f.readlines()])
    except FileNotFoundError:
        pass

    if 'disable' in default_tokens:
        print('scallywag: disabled by you')
        return

    _, package = os.path.split(repo)
    if package.endswith('.git'):
        package, _ = os.path.splitext(package)
    data = {
        "accountName": account,
        "projectSlug": slug,
        "branch": "master",
        "environmentVariables": {
            "PACKAGE": package,
            "MAINTAINER": maintainer,
            "COMMIT": commit,
            "REFERENCE": reference,
            "DEFAULT_TOKENS": default_tokens,
        }
    }

    req = urllib.request.Request('https://ci.appveyor.com/api/builds')

    req.add_header('Content-Type', 'application/json')
    req.add_header('Accept', 'application/json')
    req.add_header('Authorization', 'Bearer ' + token)

    try:
        response = urllib.request.urlopen(req, json.dumps(data).encode('utf-8'))
    except urllib.error.URLError as e:
        response = e

    status = response.getcode()
    if status != 200:
        print('scallywag: webhook failed status %s' % (status))
        return

    j = json.loads(response.read().decode('utf-8'))
    buildnumber = j['buildNumber']
    print('scallywag: build {0} queued'.format(buildnumber))
    print('scallywag: https://cygwin.com/cgi-bin2/jobs.cgi?id={0}'.format(buildnumber))

    # record job as pending
    with sqlite3.connect(carpetbag.dbfile) as conn:
        conn.execute('INSERT INTO jobs (id, srcpkg, hash, ref, user, status) VALUES (?, ?, ?, ?, ?, ?)',
                     (buildnumber, package, commit, reference, maintainer, 'pending'))
        conn.commit()


if __name__ == '__main__':
    for line in sys.stdin.readlines():
        old, new, ref = line.strip().split()
        if ref.startswith('refs/heads/') and new != '0000000000000000000000000000000000000000':
            # only do something if a branch ref is updated
            post_receive(new, ref)
